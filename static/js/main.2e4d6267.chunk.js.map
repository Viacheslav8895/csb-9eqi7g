{"version":3,"sources":["component/Page.js","component/Header.js","component/Balance.js","component/Menu.js","component/Payment.js","App.js","index.js"],"names":["Page","children","PageTag","styled","div","Header","name","onClick","HeaderTag","NameTag","LoginButtonTag","Balance","balance","BlockTag","Money","Menu","config","MenuBlock","map","menu","ButtonSendBlock","ButtonSendIcon","src","img","width","height","ButtonSendText","button","Payment","payment","length","PaymentList","Empty","PaymentItem","amount","type","PaymentBlock","PaymentIcon","PaymentText","PaymentAmount","css","START_BALANCE","LIMIT_BALANCE","GET_MONEY","SALARY_AMOUNT","COURSE_PRICE","App","React","useState","setBalance","useEffect","alert","setPayment","LOGIN","PASSWORD","isLogged","setLogged","login","prompt","password","NotLogged","rootElement","document","getElementById","createRoot","render"],"mappings":"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","file":"static/js/main.2e4d6267.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nexport default function Page({ children }) {\n  return <PageTag>{children}</PageTag>;\n}\n\nconst PageTag = styled.div`\n  /* робимо фон градієнтом */\n  background: linear-gradient(62.93deg, #24df66 19.68%, #b3b3b3 89.55%);\n\n  /* робимо фон на всю ширину */\n  width: 100%;\n`;\n","import styled from \"styled-components\";\n\nexport default function Header({ name, onClick }) {\n  return (\n    <HeaderTag>\n      <NameTag>{name}</NameTag>\n      <LoginButtonTag onClick={onClick}>Вхід</LoginButtonTag>\n    </HeaderTag>\n  );\n}\n\nconst LoginButtonTag = styled.div`\n  color: #fff;\n\n  padding: 8px 32px;\n\n  border: 3px solid #000;\n\n  border-radius: 4px;\n\n  cursor: pointer;\n`;\n\nconst NameTag = styled.div`\n  color: #fff;\n`;\n\nconst HeaderTag = styled.div`\n  /* робимо темний колір фону блока */\n  background: #1e1e1e;\n\n  /* робимо щоб знизу блок мав закруглення */\n  border-bottom-left-radius: 20px;\n  border-bottom-right-radius: 20px;\n\n  /* режим верстки flex, робимо текст по центру */\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n\n  /* ставимо колір тексту білим */\n  color: #fff;\n\n  /* робимо відступи вертикальні та горизонтальні,\n    щоб текст не притискався до країв блоку\n   */\n  padding: 15px;\n`;\n","import styled from \"styled-components\";\n\nexport default function Balance({ balance }) {\n  return (\n    <BlockTag>\n      <Money>{balance}$</Money>\n    </BlockTag>\n  );\n}\n\nconst BlockTag = styled.div`\n  /* робимо ширину на весь екран */\n  width: 100%;\n\n  /* робимо відступи по боках та зверху, \n  щоб задати потрібний розмір нашого блоку\n  */\n  padding: 100px 30px;\n\n  /* вмикаємо режим верстки flex, \n  робимо текст по центру вертикально та горизонтально \n  */\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst Money = styled.div`\n  /* задаємо розмір тексту */\n  font-size: 62px;\n\n  /* задаємо колір тексту */\n  color: #fff;\n`;\n","import styled from \"styled-components\";\n\nexport default function Menu({ config }) {\n  return (\n    <MenuBlock>\n      {/* в config нам приходить список кнопок\n        за допомогою .map() ми для кожної кнопки\n        виводимо HTML верстку\n      */}\n      {config.map((menu) => (\n        <ButtonSendBlock onClick={menu.onClick}>\n          <ButtonSendIcon>\n            {/* тут ми підгружаємо зображення, задаємо ширину та висоту */}\n            <img src={menu.img} width=\"30px\" height=\"30px\" />\n          </ButtonSendIcon>\n          <ButtonSendText>{menu.name}</ButtonSendText>\n        </ButtonSendBlock>\n      ))}\n    </MenuBlock>\n  );\n}\n\nconst ButtonSendBlock = styled.button`\n  /* відступи між картинкою та текстом кнопках */\n  gap: 12px;\n\n  /* додаємо можливість робити \n  плавну анімацію на 0.7 секунд */\n  transition: opacity 0.7s;\n\n  /* при наведенні на блок, курсор буде виглядати\n    як у клікабельних елементах\n   */\n  cursor: pointer;\n\n  /* при наведенні на блок \n    він стає прозорим на 30% (1 - 0.7)\n   */\n  &:hover {\n    opacity: 0.7;\n  }\n\n  /* === */\n\n  width: 100px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nconst MenuBlock = styled.div`\n  display: flex;\n  padding: 0 40px;\n  gap: 18px;\n  justify-content: space-around;\n  width: 100%;\n`;\n\nconst ButtonSendIcon = styled.div`\n  /* висота кнопки  */\n  height: 70px;\n\n  /* ширина кнопки */\n  width: 70px;\n\n  /* фон кнопки */\n  background: #000000;\n\n  /* закруглення країв кнопки */\n  border-radius: 35px;\n\n  /* ==== */\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst ButtonSendText = styled.div`\n  /* жирність тексту (400, 500, 600, 700) */\n  font-weight: 400;\n\n  /* розмір тексту */\n  font-size: 17px;\n\n  /* колір тексту */\n  color: #ffffff;\n\n  /* висота рядка тексту */\n  line-height: 22px;\n\n  /* ==== */\n\n  text-align: center;\n  width: 100%;\n`;\n","import styled, { css } from \"styled-components\";\n\nexport default function Payment({ payment }) {\n  // якщо в нас список платежів має\n  // кількість (на англ length) = 0\n  // то тоді ми виводимо іншу верстку\n  if (payment.length === 0) {\n    return (\n      <PaymentList>\n        <Empty>Немає транзакцій</Empty>\n      </PaymentList>\n    );\n  }\n\n  if (payment.length === 1) {\n    return (\n      <PaymentList>\n        <Empty>У вас одна транзакція</Empty>\n      </PaymentList>\n    );\n  }\n  // тут ми виводимо верстку блока всіх платежів\n  // та за допомогою функції .map() яка приймає тег\n  // ми для кожного платежу виводимо верстку\n  return <PaymentList>{payment.map(PaymentItem)}</PaymentList>;\n}\n\n// ось сама верстка одного платежу\nfunction PaymentItem({ name, amount, type }) {\n  return (\n    <PaymentBlock>\n      <PaymentIcon>\n        <img src=\"/icon/transaction.svg\" width=\"30px\" height=\"30px\" />\n      </PaymentIcon>\n      <PaymentText>{name}</PaymentText>\n      {/* ось тут ми передаємо параметр type в наш тег */}\n      {/* який відповідає за тип нашої платіжки (поповненя чи оплата) */}\n      <PaymentAmount type={type}>\n        {type}${amount}\n      </PaymentAmount>\n    </PaymentBlock>\n  );\n}\n\n// дизайн для тексту \"Немає транзакцій\"\nconst Empty = styled.div`\n  /* розмір тексту */\n  font-size: 16px;\n\n  /* колір */\n  color: #aaa;\n\n  /* === */\n\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst PaymentAmount = styled.div`\n  /* розмір тексту суми транзакції */\n  font-size: 20px;\n\n  display: flex;\n  align-items: center;\n  justify-content: flex-end;\n\n  /* ось тут ми отримуємо наш переданий параметр type */\n  /* та можемо в залежності від type */\n  /* змінювати колір тексту */\n\n  ${({ type }) => {\n    if (type === \"+\")\n      return css`\n        color: green;\n      `;\n\n    if (type === \"-\")\n      return css`\n        color: red;\n      `;\n\n    if (type === \"*\")\n      return css`\n        color: blue;\n      `;\n\n    // якщо ніякий if() не виконався\n    // то буде повертатися цей колір #fff\n    return css`\n      color: #fff;\n    `;\n  }};\n`;\n\nconst PaymentIcon = styled.div`\n  /* змінити фон іконки транзакції  */\n  background: linear-gradient(90deg, #51545b 0%, #767a85 90.71%);\n\n  /* ось так можна поставити просто один колір */\n  /* background: red; */\n\n  /* змінити ширину іконки */\n  min-width: 60px;\n\n  /* змінити висотку іконки */\n  min-height: 60px;\n\n  /* змінити закруглення країв іконки */\n  border-radius: 30px;\n\n  /* ==== */\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst PaymentText = styled.div`\n  /* змінити розмір тексту транзакції */\n  font-size: 18px;\n\n  /* змінити колір транзакції */\n  color: #fff;\n\n  /* === */\n\n  width: 100%;\n  display: flex;\n  align-items: center;\n`;\n\nconst PaymentList = styled.div`\n  /* змінити колір блоку транзакцій  */\n  background: #1e1e1e;\n\n  /* змінити закругленя країв  */\n  border-top-left-radius: 20px;\n  border-top-right-radius: 20px;\n\n  /* змінити отступи від границь  */\n  padding: 40px;\n\n  /* змінити зверху отступ до блока з меню  */\n  margin-top: 40px;\n\n  /* змінити мінімальну ширину блоку */\n  min-height: 120px;\n\n  /* ==== */\n\n  display: grid;\n  gap: 24px;\n`;\n\nconst PaymentBlock = styled.div`\n  display: grid;\n  grid-template-columns: 60px 4fr 1fr;\n  gap: 0px 20px;\n  width: 100%;\n`;\n","// ІМПОРТУЄМО БІБЛІОТЕКИ БЕЗ ЯКИХ НЕ МОЖЕМО ПИСАТИ КОД\nimport React from \"react\";\nimport styled from \"styled-components\";\n\n// ІМПОРТУЄМО ПОТРІБНІ КОМПОНЕНТИ\nimport Page from \"./component/Page\";\nimport Header from \"./component/Header\";\nimport Balance from \"./component/Balance\";\nimport Menu from \"./component/Menu\";\nimport Payment from \"./component/Payment\";\n\n// КОНФІГУРАЦІЯ ========================================\n\nconst START_BALANCE = 10000;\nconst LIMIT_BALANCE = 100000;\nconst GET_MONEY = 100;\n\nconst SALARY_AMOUNT = 1000;\nconst COURSE_PRICE = 850;\n\nexport default function App() {\n  // ФУНКЦІОНАЛ БАЛАНСУ ========================\n\n  // Ось тут тримаємо актуальне значення балансу\n\n  const [balance, setBalance] = React.useState(START_BALANCE);\n\n  // Функція для прямого поповнення балансу\n  const getMoney = () => setBalance(balance + GET_MONEY);\n\n  // Функція яка виконується кожен раз коли наш баланс змінився\n  React.useEffect(() => {\n    // Перевірка на ліміт балансу\n    if (balance > LIMIT_BALANCE) {\n      alert(`Ваш ліміт балансу: ${LIMIT_BALANCE}`);\n      setBalance(START_BALANCE);\n    }\n\n    // Перевірка на мінусовий баланс\n    if (balance < 0) {\n      alert(`Ви використали усі свої гроші. Поповніть картку`);\n      // setBalance(0);\n    }\n    // Сюди записуються змінні при оновленні яких буде виконуватися функція\n  }, [balance]);\n\n  // ФУНКЦІОНАЛ ТРАНЗАКЦІЙ =======================================\n\n  const [payment, setPayment] = React.useState([]);\n\n  const getSalary = () => {\n    setBalance(balance + SALARY_AMOUNT);\n\n    setPayment([\n      {\n        name: \"Зарплата\",\n        amount: SALARY_AMOUNT,\n        type: \"+\"\n      },\n      ...payment\n    ]);\n  };\n\n  const buyCourse = () => {\n    setBalance(balance - COURSE_PRICE);\n\n    setPayment([\n      {\n        name: \"Оплата курсу\",\n        amount: COURSE_PRICE,\n        type: \"-\"\n      },\n      ...payment\n    ]);\n  };\n\n  const buyFood = () => {\n    setBalance(balance - 20);\n\n    setPayment([\n      {\n        name: \"Оплата їжі\",\n        amount: 20,\n        type: \"*\"\n      },\n      ...payment\n    ]);\n  };\n\n  // ВЕРСТКА ІНТЕРФЕЙСУ ==========================================\n\n  const LOGIN = \"Viacheslav\";\n  const PASSWORD = \"1234\";\n\n  const [isLogged, setLogged] = React.useState(false);\n\n  const doLogin = () => {\n    const login = prompt(\"Ваш логін\");\n    const password = prompt(\"Ваш пароль\");\n\n    if (login === LOGIN && password === PASSWORD) {\n      alert(\"Ви увійшли!\");\n      setLogged(true);\n    } else {\n      if (login !== LOGIN && password !== PASSWORD) {\n        return alert(\"Помилка в логіні та паролі\");\n      }\n\n      if (login !== LOGIN) {\n        return alert(\"Помилка в логіні\");\n      }\n\n      if (password !== PASSWORD) {\n        return alert(\"Помилка в паролі\");\n      }\n    }\n  };\n\n  return (\n    <Page>\n      {/* компонент шапки з нашою назвою\n          також при кліку мишкою на шапку\n          в нас визивається функція HelloWorld\n      */}\n\n      <Header name=\"Приват24\" onClick={doLogin} />\n\n      {/* Компонент баланса в який передається\n          Актуальне значення балансу  */}\n      {isLogged && <Balance balance={balance} />}\n\n      {/* Компонент меню з кнопками */}\n      {isLogged && (\n        <Menu\n          // ось сюди ми передаємо конфігурацію кнопок\n          config={[\n            {\n              name: \"Поповнити баланс\",\n              onClick: getMoney,\n              img: \"/icon/wallet.svg\"\n            },\n            {\n              name: \"Отримати зарплату\",\n              onClick: getSalary,\n              img: \"/icon/money.svg\"\n            },\n            {\n              name: \"Купити курс\",\n              onClick: buyCourse,\n              img: \"/icon/media.svg\"\n            },\n            {\n              name: \"Купити їжу в Glovo\",\n              onClick: buyFood,\n              img: \"/icon/food.svg\"\n            }\n          ]}\n        />\n      )}\n      {/* компонент списка наших транзакцій\n          цей функціонал ми будемо робити на 3 уроці\n      */}\n      {isLogged && <Payment payment={payment} />}\n      {isLogged === false && (\n        <NotLogged>Вам потрібно увійти в акаунт</NotLogged>\n      )}\n    </Page>\n  );\n}\n\nconst NotLogged = styled.div`\n  padding: 100px 30px;\n  background: #000;\n  color: #fff;\n  text-align: center;\n\n  margin-top: 100px;\n\n  border-top-left-radius: 30px;\n  border-top-right-radius: 30px;\n`;\n","//==\n//==\n// ЦЕ ТЕХНІЧНИЙ ФАЙЛ В ЯКОМУ ВСЕ ПІДКЛЮЧАЄТЬСЯ ТА ГЕНЕРУЄТСЬЯ\n\n// імпортуємо потрібні технології\nimport { StrictMode } from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\n// імпортуємо наш додаток\nimport App from \"./App\";\n\n// імпортуємо потрібні css стилі\nimport \"../src/style.css\";\nimport \"../src/main.css\";\n\n// генеруємо наше ядро додатку\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\n\n// рендеримо (вставляємо) наш додаток в ядро\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>\n);\n"],"sourceRoot":""}